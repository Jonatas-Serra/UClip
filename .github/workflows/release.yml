name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Setup Python (para backend, se necessÃ¡rio)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Clean development data before build
      - name: Clean development data
        run: |
          echo "ðŸ§¹ Cleaning development data..."
          rm -f *.db *.db-shm *.db-wal
          rm -rf images/
          rm -rf backend/images/
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete
          echo "âœ… Development data cleaned"

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxss1 fakeroot dpkg python3 python3-pip python3-venv xclip wl-clipboard

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Build frontend with Vite
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Prepare app directory for electron-builder
      - name: Prepare app for packaging
        run: |
          cd frontend
          npm run prepack

      # Build AppImage and DEB using electron-builder
      - name: Build AppImage and DEB
        run: |
          cd frontend
          npx electron-builder --linux deb AppImage --publish never
        env:
          SKIP_NOTARIZATION: true

      # List generated files for debugging
      - name: List build artifacts
        run: |
          echo "=== Searching for build artifacts ==="
          find frontend -type f \( -name "*.AppImage" -o -name "*.deb" \) 2>/dev/null | head -20
          echo ""
          echo "=== Content of frontend/dist ==="
          ls -lah frontend/dist/ 2>/dev/null || echo "frontend/dist not found"

      # Extract version from tag
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION_NUMBER=${VERSION#v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION_NUMBER}" >> $GITHUB_OUTPUT

      # Rename files to match expected pattern
      - name: Rename build artifacts
        run: |
          cd frontend/dist
          # Rename .deb file
          if [ -f uclip-frontend_*.deb ]; then
            DEB_FILE=$(ls uclip-frontend_*.deb)
            NEW_DEB_NAME="UClip-${{ steps.version.outputs.VERSION_NUMBER }}.deb"
            mv "$DEB_FILE" "$NEW_DEB_NAME"
            echo "Renamed $DEB_FILE to $NEW_DEB_NAME"
          fi
          # Rename .AppImage file
          if [ -f uclip-frontend-*.AppImage ]; then
            APPIMAGE_FILE=$(ls uclip-frontend-*.AppImage)
            NEW_APPIMAGE_NAME="UClip-${{ steps.version.outputs.VERSION_NUMBER }}.AppImage"
            mv "$APPIMAGE_FILE" "$NEW_APPIMAGE_NAME"
            echo "Renamed $APPIMAGE_FILE to $NEW_APPIMAGE_NAME"
          fi
          echo ""
          echo "=== Final files ==="
          ls -lah UClip-*

      # Create GitHub Release with assets
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            frontend/dist/UClip-*.AppImage
            frontend/dist/UClip-*.deb
          body: |
            ## ðŸ“¦ UClip ${{ steps.version.outputs.VERSION }}
            
            ### ðŸ“¥ Installation
            
            **Ubuntu/Debian (.deb - Recommended):**
            ```bash
            # Download and install (everything is configured automatically!)
            wget https://github.com/Jonatas-Serra/UClip/releases/download/${{ steps.version.outputs.VERSION }}/UClip-${{ steps.version.outputs.VERSION_NUMBER }}.deb
            sudo dpkg -i UClip-${{ steps.version.outputs.VERSION_NUMBER }}.deb
            
            # That's it! Backend, services, and database are all configured.
            # Just launch UClip:
            uclip
            ```
            
            âœ… **What the .deb installer does automatically:**
            - Installs backend (Python) in `/opt/UClip`
            - Creates and enables systemd services
            - Sets up database with correct permissions
            - Configures clipboard listener autostart
            
            **Verify installation:**
            ```bash
            # Check frontend
            which uclip
            
            # Check backend services
            systemctl status uclip-backend.service
            systemctl status uclip-listener.service
            
            # View logs
            sudo journalctl -u uclip-backend.service -f
            ```
            
            **AppImage (Universal/Portable):**
            ```bash
            # Download
            wget https://github.com/Jonatas-Serra/UClip/releases/download/${{ steps.version.outputs.VERSION }}/UClip-${{ steps.version.outputs.VERSION_NUMBER }}.AppImage
            chmod +x UClip-${{ steps.version.outputs.VERSION_NUMBER }}.AppImage
            
            # Note: AppImage includes frontend only. Backend needs manual setup.
            # For AppImage + Backend, use the .deb instead (recommended)
            
            ./UClip-${{ steps.version.outputs.VERSION_NUMBER }}.AppImage
            ```
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts for inspection
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.VERSION }}
          path: |
            frontend/dist/*.AppImage
            frontend/dist/*.deb
          retention-days: 30
